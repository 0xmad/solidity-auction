/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Voting, VotingInterface } from '../Voting';

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes32[]',
        name: '_proposals',
        type: 'bytes32[]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    inputs: [],
    name: 'chairperson',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'voter',
        type: 'address',
      },
    ],
    name: 'giveRightToVote',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    name: 'proposals',
    outputs: [
      {
        internalType: 'bytes32',
        name: 'name',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'count',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'voters',
    outputs: [
      {
        internalType: 'uint256',
        name: 'weight',
        type: 'uint256',
      },
      {
        internalType: 'bool',
        name: 'voted',
        type: 'bool',
      },
      {
        internalType: 'uint256',
        name: 'vote',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b50604051620010523803806200105283398181016040528101906200003791906200035e565b6000620000496200029d60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060008151116200012e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012590620003ca565b60405180910390fd5b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160026000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b81518110156200029557600360405180604001604052808484815181106200022d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550506001816200028d919062000455565b9050620001dc565b5050620005ae565b600033905090565b6000620002bc620002b68462000415565b620003ec565b90508083825260208201905082856020860282011115620002dc57600080fd5b60005b85811015620003105781620002f5888262000347565b845260208401935060208301925050600181019050620002df565b5050509392505050565b600082601f8301126200032c57600080fd5b81516200033e848260208601620002a5565b91505092915050565b600081519050620003588162000594565b92915050565b6000602082840312156200037157600080fd5b600082015167ffffffffffffffff8111156200038c57600080fd5b6200039a848285016200031a565b91505092915050565b6000620003b2600f8362000444565b9150620003bf826200056b565b602082019050919050565b60006020820190508181036000830152620003e581620003a3565b9050919050565b6000620003f86200040b565b9050620004068282620004c6565b919050565b6000604051905090565b600067ffffffffffffffff8211156200043357620004326200052b565b5b602082029050602081019050919050565b600082825260208201905092915050565b60006200046282620004bc565b91506200046f83620004bc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620004a757620004a6620004fc565b5b828201905092915050565b6000819050919050565b6000819050919050565b620004d1826200055a565b810181811067ffffffffffffffff82111715620004f357620004f26200052b565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f456d7074792070726f706f73616c730000000000000000000000000000000000600082015250565b6200059f81620004b2565b8114620005ab57600080fd5b50565b610a9480620005be6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100db5780639e7b8d61146100f9578063a3ec138d14610115578063f2fde38b146101475761007d565b8063013cf08b146100825780632e4176cf146100b3578063715018a6146100d1575b600080fd5b61009c60048036038101906100979190610717565b610163565b6040516100aa929190610823565b60405180910390f35b6100bb610197565b6040516100c89190610808565b60405180910390f35b6100d96101bd565b005b6100e36102f7565b6040516100f09190610808565b60405180910390f35b610113600480360381019061010e91906106ee565b610320565b005b61012f600480360381019061012a91906106ee565b6104dc565b60405161013e939291906108cc565b60405180910390f35b610161600480360381019061015c91906106ee565b610513565b005b6003818154811061017357600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101c56106bc565b73ffffffffffffffffffffffffffffffffffffffff166101e36102f7565b73ffffffffffffffffffffffffffffffffffffffff1614610239576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610230906108ac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103286106bc565b73ffffffffffffffffffffffffffffffffffffffff166103466102f7565b73ffffffffffffffffffffffffffffffffffffffff161461039c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610393906108ac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561040c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104039061084c565b60405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610491576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104889061088c565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60026020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060020154905083565b61051b6106bc565b73ffffffffffffffffffffffffffffffffffffffff166105396102f7565b73ffffffffffffffffffffffffffffffffffffffff161461058f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610586906108ac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f69061086c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000813590506106d381610a30565b92915050565b6000813590506106e881610a47565b92915050565b60006020828403121561070057600080fd5b600061070e848285016106c4565b91505092915050565b60006020828403121561072957600080fd5b6000610737848285016106d9565b91505092915050565b61074981610914565b82525050565b61075881610926565b82525050565b61076781610932565b82525050565b600061077a601b83610903565b915061078582610966565b602082019050919050565b600061079d602683610903565b91506107a88261098f565b604082019050919050565b60006107c0602083610903565b91506107cb826109de565b602082019050919050565b60006107e3602083610903565b91506107ee82610a07565b602082019050919050565b6108028161095c565b82525050565b600060208201905061081d6000830184610740565b92915050565b6000604082019050610838600083018561075e565b61084560208301846107f9565b9392505050565b600060208201905081810360008301526108658161076d565b9050919050565b6000602082019050818103600083015261088581610790565b9050919050565b600060208201905081810360008301526108a5816107b3565b9050919050565b600060208201905081810360008301526108c5816107d6565b9050919050565b60006060820190506108e160008301866107f9565b6108ee602083018561074f565b6108fb60408301846107f9565b949350505050565b600082825260208201905092915050565b600061091f8261093c565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f5a65726f2061646472657373206973206e6f7420616c6c6f7765640000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f54686520766f7465722068617320616c7265616479206265656e206164646564600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610a3981610914565b8114610a4457600080fd5b50565b610a508161095c565b8114610a5b57600080fd5b5056fea26469706673582212204ceea810093e2d6f08d99f130c222a90cff6b2ce5da815e2aa248c64c4b8a5f064736f6c63430008040033';

export class Voting__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _proposals: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<Voting> {
    return super.deploy(_proposals, overrides || {}) as Promise<Voting>;
  }
  getDeployTransaction(
    _proposals: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_proposals, overrides || {});
  }
  attach(address: string): Voting {
    return super.attach(address) as Voting;
  }
  connect(signer: Signer): Voting__factory {
    return super.connect(signer) as Voting__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingInterface {
    return new utils.Interface(_abi) as VotingInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Voting {
    return new Contract(address, _abi, signerOrProvider) as Voting;
  }
}

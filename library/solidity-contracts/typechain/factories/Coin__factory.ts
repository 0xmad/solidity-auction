/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Coin, CoinInterface } from '../Coin';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousOwner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'OwnershipTransferred',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'from',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct Coin.TransferData',
        name: 'data',
        type: 'tuple',
      },
    ],
    name: 'Send',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'balances',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'receiver',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'receiver',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'send',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newOwner',
        type: 'address',
      },
    ],
    name: 'transferOwnership',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5060006100216100c460201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100cc565b600033905090565b610dde806100db6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806327e235e31461006757806340c10f1914610097578063715018a6146100b35780638da5cb5b146100bd578063d0679d34146100db578063f2fde38b146100f7575b600080fd5b610081600480360381019061007c91906108fe565b610113565b60405161008e9190610b66565b60405180910390f35b6100b160048036038101906100ac9190610927565b61012b565b005b6100bb6102f7565b005b6100c5610431565b6040516100d29190610a90565b60405180910390f35b6100f560048036038101906100f09190610927565b61045a565b005b610111600480360381019061010c91906108fe565b6106f7565b005b60016020528060005260406000206000915090505481565b6101336108a0565b73ffffffffffffffffffffffffffffffffffffffff16610151610431565b73ffffffffffffffffffffffffffffffffffffffff16146101a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019e90610b2b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610217576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020e90610aab565b60405180910390fd5b6402540be400811061025e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025590610aeb565b60405180910390fd5b6102b081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108a890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6102ff6108a0565b73ffffffffffffffffffffffffffffffffffffffff1661031d610431565b73ffffffffffffffffffffffffffffffffffffffff1614610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036a90610b2b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156104ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c190610aab565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561054c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054390610b0b565b60405180910390fd5b61059e81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108be90919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061063381600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108a890919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fd6c24bcb95d1f91ec9a1af9074fbd38b421dbb2ee2953fe13c87de3ddb27d5b360405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152506040516106eb9190610b4b565b60405180910390a15050565b6106ff6108a0565b73ffffffffffffffffffffffffffffffffffffffff1661071d610431565b73ffffffffffffffffffffffffffffffffffffffff1614610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a90610b2b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90610acb565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600081836108b69190610b92565b905092915050565b600081836108cc9190610be8565b905092915050565b6000813590506108e381610d7a565b92915050565b6000813590506108f881610d91565b92915050565b60006020828403121561091057600080fd5b600061091e848285016108d4565b91505092915050565b6000806040838503121561093a57600080fd5b6000610948858286016108d4565b9250506020610959858286016108e9565b9150509250929050565b61096c81610c1c565b82525050565b61097b81610c1c565b82525050565b600061098e601b83610b81565b915061099982610c87565b602082019050919050565b60006109b1602683610b81565b91506109bc82610cb0565b604082019050919050565b60006109d4601383610b81565b91506109df82610cff565b602082019050919050565b60006109f7601083610b81565b9150610a0282610d28565b602082019050919050565b6000610a1a602083610b81565b9150610a2582610d51565b602082019050919050565b606082016000820151610a466000850182610963565b506020820151610a596020850182610963565b506040820151610a6c6040850182610a72565b50505050565b610a7b81610c4e565b82525050565b610a8a81610c4e565b82525050565b6000602082019050610aa56000830184610972565b92915050565b60006020820190508181036000830152610ac481610981565b9050919050565b60006020820190508181036000830152610ae4816109a4565b9050919050565b60006020820190508181036000830152610b04816109c7565b9050919050565b60006020820190508181036000830152610b24816109ea565b9050919050565b60006020820190508181036000830152610b4481610a0d565b9050919050565b6000606082019050610b606000830184610a30565b92915050565b6000602082019050610b7b6000830184610a81565b92915050565b600082825260208201905092915050565b6000610b9d82610c4e565b9150610ba883610c4e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610bdd57610bdc610c58565b5b828201905092915050565b6000610bf382610c4e565b9150610bfe83610c4e565b925082821015610c1157610c10610c58565b5b828203905092915050565b6000610c2782610c2e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f5a65726f2061646472657373206973206e6f7420616c6c6f7765640000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e7420697320746f6f206c6172676500000000000000000000000000600082015250565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610d8381610c1c565b8114610d8e57600080fd5b50565b610d9a81610c4e565b8114610da557600080fd5b5056fea264697066735822122075b4e981318f84f562a0e66b3fcecdaac126402cfa149630751b38361fbca13364736f6c63430008040033';

export class Coin__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<Coin> {
    return super.deploy(overrides || {}) as Promise<Coin>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Coin {
    return super.attach(address) as Coin;
  }
  connect(signer: Signer): Coin__factory {
    return super.connect(signer) as Coin__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoinInterface {
    return new utils.Interface(_abi) as CoinInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Coin {
    return new Contract(address, _abi, signerOrProvider) as Coin;
  }
}

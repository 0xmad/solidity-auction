/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Coin, CoinInterface } from "../Coin";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct Coin.TransferData",
        name: "data",
        type: "tuple",
      },
    ],
    name: "Send",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "c__0xc26863bf",
        type: "bytes32",
      },
    ],
    name: "c_0xc26863bf",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "send",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060006100216100c460201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100cc565b600033905090565b6112ef806100db6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ea5780638da5cb5b146100f4578063d0679d3414610112578063f2fde38b1461012e5761007d565b806318d80f3a1461008257806327e235e31461009e57806340c10f19146100ce575b600080fd5b61009c60048036038101906100979190610e2a565b61014a565b005b6100b860048036038101906100b39190610dc5565b61014d565b6040516100c59190611056565b60405180910390f35b6100e860048036038101906100e39190610dee565b610165565b005b6100f2610515565b005b6100fc61064f565b6040516101099190610f80565b60405180910390f35b61012c60048036038101906101279190610dee565b610678565b005b61014860048036038101906101439190610dc5565b610ba9565b005b50565b60016020528060005260406000206000915090505481565b61016d610d52565b73ffffffffffffffffffffffffffffffffffffffff1661018b61064f565b73ffffffffffffffffffffffffffffffffffffffff16146101e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d89061101b565b60405180910390fd5b61020d7fceb96f3f9b01f030ac1bf2ea8924675b92ff08c46e9198a134e30aa786765be660001b61014a565b6102397fee118938f1349abfad20c8c406c8cf6722ca29cfa3f8b6d0ba36a97c95e7188360001b61014a565b6102657fd7d7630630f83328d115c11923b3bfefdb76782e2fcb23127c0ad110a69c57e160001b61014a565b6102917f658dc0c52071062ebe98b09f36b00bd281a5939791edb16a6d82b240950a55c960001b61014a565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f890610f9b565b60405180910390fd5b61032d7f0e04b8ff4aad7a1a5bc16c9534c321d6ea4e3b91a962dfd90d5f600ad0094bed60001b61014a565b6103597f16006faa8c05b416f4f6b960a2ad8bbdc263c584965c78391dc1cbc6505c30b060001b61014a565b6103857f0188bf06f4eac756eca30a613b581425982709cf12916eca478ec0f79411311660001b61014a565b6103b17f96654521a9f73c8f2abed8f4508501977f8a2592102a276a40dfdac8ca753ecb60001b61014a565b6402540be40081106103f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ef90610fdb565b60405180910390fd5b6104247f84098b46ea4363f6bdbb03d7606327cd69f0ed6aea312f45bd1403fdd15b6e5960001b61014a565b6104507fb60668856fc8c7a257df7cd93ab096b17f5088f4ee1aa78ba1ee2d3f42ded16060001b61014a565b61047c7f3ccc555b5d420dd3326ce7f4dd261143d0f4d856ad693657574f12d338b0086560001b61014a565b6104ce81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d5a90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b61051d610d52565b73ffffffffffffffffffffffffffffffffffffffff1661053b61064f565b73ffffffffffffffffffffffffffffffffffffffff1614610591576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105889061101b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6106a47f57cddb0eea87443b57e365bb87c853b913b5e31d4d7e1dd6f395cda205b2375d60001b61014a565b6106d07fd838f0da3b2915166a189c261c99cfa44a02941acb29c71487834df17dcdc5aa60001b61014a565b6106fc7fc8f5225cd07dbbe2c6650a45fc2bbb562c11c86ea3401809adb99db8adf12a0560001b61014a565b6107287f798e3d090b1a64bb9b27002ae588c11cbe1ff13f0080493b45596d0a2df2abbc60001b61014a565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f90610f9b565b60405180910390fd5b6107c47f8edb4e8c412f2e0c82d304d0ad0a89ff45e895e38161db2ea8d0db51726aac5260001b61014a565b6107f07fc0f6b371d69e5888a19b6003a52452dd67479449aae9c4924a2cf2ffce877ca760001b61014a565b61081c7f675049ec788e308aaa7fb218879ff760dc0a74c4ac42f7e56d1ec879ac2e7b9260001b61014a565b6108487f43ad2cf9ba964866913ea858337d2f6f4797b3e252bde5e5496611f6bc51adea60001b61014a565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156108ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c190610ffb565b60405180910390fd5b6108f67fdb4773020c6690e7eb76a49d90ef2b7ea7109728df08432d52047d06706e160160001b61014a565b6109227f4f3cd9565692e45451d7380aa46a3a8f7394a05b3ee154c5e22c4f560298781660001b61014a565b61094e7f49f81239a966c196e1bfc218ff6e7c4c9b256a7c661b07e07d1daf348ce27d9a60001b61014a565b6109a081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d7090919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a0f7f39276ef85bbfc71116532c5dda4f9de0e18cd024d5734c14bf722df435b3bbf860001b61014a565b610a3b7f4e83a3b06c88af9bfd2c13d9793c3580313b95d2c6a44696891104ddfbccbadd60001b61014a565b610a8d81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d5a90919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610afc7fd7bec648de1aa7984a4ec349e96678b9c868a2e752ace4b6b4f06166f1b18f1760001b61014a565b610b287f1e915318984c2bfcb90fcfedce17f31a90d93dbc0d4782ea5fcc74e0f26a4f4960001b61014a565b7fd6c24bcb95d1f91ec9a1af9074fbd38b421dbb2ee2953fe13c87de3ddb27d5b360405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250604051610b9d919061103b565b60405180910390a15050565b610bb1610d52565b73ffffffffffffffffffffffffffffffffffffffff16610bcf61064f565b73ffffffffffffffffffffffffffffffffffffffff1614610c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1c9061101b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8c90610fbb565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b60008183610d689190611082565b905092915050565b60008183610d7e91906110d8565b905092915050565b600081359050610d9581611274565b92915050565b600081359050610daa8161128b565b92915050565b600081359050610dbf816112a2565b92915050565b600060208284031215610dd757600080fd5b6000610de584828501610d86565b91505092915050565b60008060408385031215610e0157600080fd5b6000610e0f85828601610d86565b9250506020610e2085828601610db0565b9150509250929050565b600060208284031215610e3c57600080fd5b6000610e4a84828501610d9b565b91505092915050565b610e5c8161110c565b82525050565b610e6b8161110c565b82525050565b6000610e7e601b83611071565b9150610e8982611181565b602082019050919050565b6000610ea1602683611071565b9150610eac826111aa565b604082019050919050565b6000610ec4601383611071565b9150610ecf826111f9565b602082019050919050565b6000610ee7601083611071565b9150610ef282611222565b602082019050919050565b6000610f0a602083611071565b9150610f158261124b565b602082019050919050565b606082016000820151610f366000850182610e53565b506020820151610f496020850182610e53565b506040820151610f5c6040850182610f62565b50505050565b610f6b81611148565b82525050565b610f7a81611148565b82525050565b6000602082019050610f956000830184610e62565b92915050565b60006020820190508181036000830152610fb481610e71565b9050919050565b60006020820190508181036000830152610fd481610e94565b9050919050565b60006020820190508181036000830152610ff481610eb7565b9050919050565b6000602082019050818103600083015261101481610eda565b9050919050565b6000602082019050818103600083015261103481610efd565b9050919050565b60006060820190506110506000830184610f20565b92915050565b600060208201905061106b6000830184610f71565b92915050565b600082825260208201905092915050565b600061108d82611148565b915061109883611148565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156110cd576110cc611152565b5b828201905092915050565b60006110e382611148565b91506110ee83611148565b92508282101561110157611100611152565b5b828203905092915050565b600061111782611128565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f5a65726f2061646472657373206973206e6f7420616c6c6f7765640000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416d6f756e7420697320746f6f206c6172676500000000000000000000000000600082015250565b7f4e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61127d8161110c565b811461128857600080fd5b50565b6112948161111e565b811461129f57600080fd5b50565b6112ab81611148565b81146112b657600080fd5b5056fea264697066735822122050795ff869252771d767216f73eadd9af90b4ff29c2ad08269033fd85e3b0c1764736f6c63430008040033";

export class Coin__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Coin> {
    return super.deploy(overrides || {}) as Promise<Coin>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Coin {
    return super.attach(address) as Coin;
  }
  connect(signer: Signer): Coin__factory {
    return super.connect(signer) as Coin__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoinInterface {
    return new utils.Interface(_abi) as CoinInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Coin {
    return new Contract(address, _abi, signerOrProvider) as Coin;
  }
}
